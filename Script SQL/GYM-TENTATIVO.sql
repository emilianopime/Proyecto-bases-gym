-- 1. Tabla Clientes
CREATE TABLE Clientes (
    ClienteID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PrimerNombre VARCHAR2(50) NOT NULL,
    SegundoNombre VARCHAR2(50),
    ApellidoPaterno VARCHAR2(50) NOT NULL,
    ApellidoMaterno VARCHAR2(50),
    FechaNacimiento DATE,
    Telefono VARCHAR2(20),
    Correo VARCHAR2(100) UNIQUE, -- Se sugiere que el correo sea único
    Genero CHAR(1) CHECK (Genero IN ('M', 'F', 'O')), -- M: Masculino, F: Femenino, O: Otro
    FechaRegistro DATE DEFAULT SYSDATE NOT NULL
);

-- 2. Tabla Membresias (Tipos de Membresía)
CREATE TABLE Membresias (
    MembresiaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL UNIQUE, -- Nombre del tipo de membresía (ej. "Premium Mensual", "Acceso Total Anual")
    Descripcion VARCHAR2(255), -- Descripción más detallada de lo que incluye
    Precio NUMBER(10,2) NOT NULL CHECK (Precio >= 0),
    DuracionDias NUMBER NOT NULL CHECK (DuracionDias > 0), -- Duración de la membresía en días
    AccesoPiscina NUMBER(1) DEFAULT 0 NOT NULL CHECK (AccesoPiscina IN (0,1)), -- 0: No, 1: Sí
    AccesoClases NUMBER(1) DEFAULT 0 NOT NULL CHECK (AccesoClases IN (0,1)) -- 0: No, 1: Sí
);


-- 3. Tabla TiposPago (Para normalizar los métodos de pago)
CREATE TABLE TiposPago (
    TipoPagoID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL UNIQUE -- Ej. "Efectivo", "Tarjeta de Crédito", "Transferencia"
);

-- Insertar algunos tipos de pago comunes
INSERT INTO TiposPago (Nombre) VALUES ('Efectivo');
INSERT INTO TiposPago (Nombre) VALUES ('Tarjeta de Crédito');
INSERT INTO TiposPago (Nombre) VALUES ('Tarjeta de Débito');
INSERT INTO TiposPago (Nombre) VALUES ('Transferencia Bancaria');
INSERT INTO TiposPago (Nombre) VALUES ('Otro');


-- 4. Tabla ClientesMembresias (Relación entre Clientes y las Membresías que adquieren)
CREATE TABLE ClientesMembresias (
    ClienteMembresiaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClienteID NUMBER NOT NULL,
    MembresiaID NUMBER NOT NULL,
    TipoPagoID NUMBER, -- Referencia al método de pago utilizado
    FechaInicio DATE NOT NULL,
    FechaFin DATE NOT NULL,
    Estado VARCHAR2(20) NOT NULL CHECK (Estado IN ('Activa', 'Vencida', 'Congelada', 'Cancelada', 'Pendiente')),
    MontoPagado NUMBER(10,2) CHECK (MontoPagado >= 0), -- Monto efectivamente pagado por esta instancia de membresía
    FechaPago DATE, -- Fecha en que se realizó el pago
    Notas VARCHAR2(500), -- Notas adicionales sobre esta transacción de membresía específica
    CONSTRAINT FK_ClientesMembresias_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID),
    CONSTRAINT FK_ClientesMembresias_Membresia FOREIGN KEY (MembresiaID) REFERENCES Membresias(MembresiaID),
    CONSTRAINT FK_ClientesMembresias_TipoPago FOREIGN KEY (TipoPagoID) REFERENCES TiposPago(TipoPagoID),
    CONSTRAINT CHK_ClientesMembresias_Fechas CHECK (FechaFin >= FechaInicio)
);

-- 5. Tabla Entrenadores
CREATE TABLE Entrenadores (
    EntrenadorID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Apellido VARCHAR2(50) NOT NULL,
    Especialidad VARCHAR2(150), -- Puede ser una lista de especialidades o la principal
    Telefono VARCHAR2(20) UNIQUE,
    Correo VARCHAR2(100) NOT NULL UNIQUE,
    FechaContratacion DATE DEFAULT SYSDATE,
    Activo NUMBER(1) DEFAULT 1 NOT NULL CHECK (Activo IN (0,1)) -- 0: Inactivo, 1: Activo
);

-- 6. Tabla Clases 
CREATE TABLE Clases (
    ClaseID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(100) NOT NULL,
    Descripcion VARCHAR2(500), -- Descripción de la clase
    EntrenadorID NUMBER, -- Puede ser NULL si la clase es genérica y el entrenador se asigna por horario específico
    DiaSemana VARCHAR2(20) NOT NULL CHECK (DiaSemana IN ('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo', 'Variable')),
    HoraInicio VARCHAR2(5) NOT NULL, -- Formato HH:MM (ej. "09:00", "18:30")
    DuracionMinutos NUMBER NOT NULL CHECK (DuracionMinutos > 0),
    CapacidadMaxima NUMBER CHECK (CapacidadMaxima > 0),
    NivelDificultad VARCHAR2(50) CHECK (NivelDificultad IN ('Principiante', 'Intermedio', 'Avanzado', 'Todos los niveles')),
    Activa NUMBER(1) DEFAULT 1 NOT NULL CHECK (Activa IN (0,1)), -- Si la clase está actualmente ofrecida
    CONSTRAINT FK_Clases_Entrenador FOREIGN KEY (EntrenadorID) REFERENCES Entrenadores(EntrenadorID),
    CONSTRAINT CHK_Clases_HoraInicioFormat CHECK (REGEXP_LIKE(HoraInicio, '^[0-2][0-9]:[0-5][0-9]$')) -- Valida formato HH:MM
);

-- 7. Tabla AsistenciaClases (Registro de asistencia de clientes a clases)
CREATE TABLE AsistenciaClases (
    AsistenciaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClienteID NUMBER NOT NULL,
    ClaseID NUMBER NOT NULL, -- Referencia a la clase específica programada
    FechaAsistencia DATE NOT NULL, -- Fecha en que el cliente asistió
    HoraCheckIn VARCHAR2(5), -- Hora exacta del check-in, formato HH:MM, opcional
    Asistio NUMBER(1) DEFAULT 1 NOT NULL CHECK (Asistio IN (0,1)), -- 1: Asistió, 0: No asistió (ej. reserva cancelada)
    CONSTRAINT FK_Asistencia_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID),
    CONSTRAINT FK_Asistencia_Clase FOREIGN KEY (ClaseID) REFERENCES Clases(ClaseID),
    CONSTRAINT UK_Asistencia_Unica UNIQUE (ClienteID, ClaseID, FechaAsistencia) -- Evita duplicados de asistencia para el mismo cliente, clase y día
);

-- 8. Tabla UsuariosSistema (Para empleados que usarán el sistema)
CREATE TABLE UsuariosSistema (
    UsuarioID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NombreCompleto VARCHAR2(100) NOT NULL,
    Username VARCHAR2(50) NOT NULL UNIQUE,
    PasswordHash VARCHAR2(255) NOT NULL, -- IMPORTANTE: Almacenar el hash de la contraseña, NUNCA la contraseña en texto plano
    Rol VARCHAR2(30) NOT NULL CHECK (Rol IN ('Administrador', 'Gerente', 'Recepcionista', 'Entrenador')),
    Correo VARCHAR2(100) UNIQUE, -- Correo del empleado para notificaciones o recuperación de cuenta
    Activo NUMBER(1) DEFAULT 1 NOT NULL CHECK (Activo IN (0,1)),
    FechaCreacion DATE DEFAULT SYSDATE NOT NULL
);


-- 9. Tabla NotasClientes (Para notas internas sobre los clientes)
CREATE TABLE NotasClientes (
    NotaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ClienteID NUMBER NOT NULL,
    UsuarioID NUMBER NOT NULL, -- Empleado que registró la nota
    FechaNota TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    TextoNota VARCHAR2(1000) NOT NULL,
    CONSTRAINT FK_NotasClientes_Cliente FOREIGN KEY (ClienteID) REFERENCES Clientes(ClienteID),
    CONSTRAINT FK_NotasClientes_Usuario FOREIGN KEY (UsuarioID) REFERENCES UsuariosSistema(UsuarioID)
);

ALTER TABLE UsuariosSistema MODIFY (PasswordHash VARCHAR2(255));

COMMIT;
